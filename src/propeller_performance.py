import numpy as np
import time
from scipy.interpolate import interp1d
from scipy.optimize import root_scalar

class PropellerPerformance:
    
    def __init__(self):
        self.Kt = 0
        self.Kts = 0
        self.Kq = 0
        self.Rn = 0
        
        # Constants for calculation of thrust coef. polynomial KtM = [Ct s t u v]
        self.KtM = np.array([
                            [0.00880496, 0, 0, 0, 0],
                            [-0.204554, 1, 0, 0, 0],
                            [0.166351, 0, 1, 0, 0],
                            [0.158114, 0, 2, 0, 0],
                            [-0.147581, 2, 0, 1, 0],
                            [-0.481497, 1, 1, 1, 0],
                            [0.415437, 0, 2, 1, 0],
                            [0.0144043, 0, 0, 0, 1],
                            [-0.0530054, 2, 0, 0, 1],
                            [0.0143481, 0, 1, 0, 1],
                            [0.0606826, 1, 1, 0, 1],
                            [-0.0125894, 0, 0, 1, 1],
                            [0.0109689, 1, 0, 1, 1],
                            [-0.133698, 0, 3, 0, 0],
                            [0.00638407, 0, 6, 0, 0],
                            [-0.00132718, 2, 6, 0, 0],
                            [0.168496, 3, 0, 1, 0],
                            [-0.0507214, 0, 0, 2, 0],
                            [0.0854559, 2, 0, 2, 0],
                            [-0.0504475, 3, 0, 2, 0],
                            [0.010465, 1, 6, 2, 0],
                            [-0.00648272, 2, 6, 2, 0],
                            [-0.00841728, 0, 3, 0, 1],
                            [0.0168424, 1, 3, 0, 1],
                            [-0.00102296, 3, 3, 0, 1],
                            [-0.0317791, 0, 3, 1, 1],
                            [0.018604, 1, 0, 2, 1],
                            [-0.00410798, 0, 2, 2, 1],
                            [-0.000606848, 0, 0, 0, 2],
                            [-0.0049819, 1, 0, 0, 2],
                            [0.0025983, 2, 0, 0, 2],
                            [-0.000560528, 3, 0, 0, 2],
                            [-0.00163652, 1, 2, 0, 2],
                            [-0.000328787, 1, 6, 0, 2],
                            [0.000116502, 2, 6, 0, 2],
                            [0.000690904, 0, 0, 1, 2],
                            [0.00421749, 0, 3, 1, 2],
                            [0.0000565229, 3, 6, 1, 2],
                            [-0.00146564, 0, 3, 2, 2]
                        ])

        self.sigma = np.array([0.096862500000000004,
                    0.10587000000000001,
                    0.106216,
                    0.109273,
                    0.119423,
                    0.123934,
                    0.128191,
                    0.13007099999999999,
                    0.13341500000000001,
                    0.134549,
                    0.14549799999999999,
                    0.14605000000000001,
                    0.15130199999999999,
                    0.151667,
                    0.15199399999999999,
                    0.155477,
                    0.160436,
                    0.16317799999999999,
                    0.17261499999999999,
                    0.17371400000000001,
                    0.18035000000000001,
                    0.18085899999999999,
                    0.18160699999999999,
                    0.192745,
                    0.194136,
                    0.19465399999999999,
                    0.19600799999999999,
                    0.19946800000000001,
                    0.20290900000000001,
                    0.21307599999999999,
                    0.225825,
                    0.229187,
                    0.230794,
                    0.23083699999999999,
                    0.23810899999999999,
                    0.25256000000000001,
                    0.25791900000000001,
                    0.25904100000000002,
                    0.27360099999999998,
                    0.27987699999999999,
                    0.28253499999999998,
                    0.284076,
                    0.30036800000000002,
                    0.31314799999999998,
                    0.31723600000000002,
                    0.32325500000000001,
                    0.32732699999999998,
                    0.33511299999999999,
                    0.33834199999999998,
                    0.338949,
                    0.35490699999999997,
                    0.370035,
                    0.37800400000000001,
                    0.38853399999999999,
                    0.40578199999999998,
                    0.40638099999999999,
                    0.42553600000000003,
                    0.42557,
                    0.42629299999999998,
                    0.45186700000000002,
                    0.46911799999999998,
                    0.47751100000000002,
                    0.50036000000000003,
                    0.50109800000000004,
                    0.53931399999999996,
                    0.54041099999999997,
                    0.56211999999999995,
                    0.56902399999999997,
                    0.57547700000000002,
                    0.61299899999999996,
                    0.62196399999999996,
                    0.66512800000000005,
                    0.68407200000000001,
                    0.70733400000000002,
                    0.73042899999999999,
                    0.73881799999999997,
                    0.79774900000000004,
                    0.844171,
                    0.873004,
                    0.92922199999999999,
                    0.949152,
                    0.97735399999999995,
                    1.01081,
                    1.0557700000000001,
                    1.1779999999999999,
                    1.2024699999999999,
                    1.20367,
                    1.20939,
                    1.26433,
                    1.4072199999999999,
                    1.48156,
                    1.49136,
                    1.5542800000000001,
                    1.6796500000000001])
        
        self.tal5 = np.array([0.040322299999999998, 
                            0.044961399999999999, 
                            0.045141599999999997, 
                            0.046737800000000003, 
                            0.052109099999999998, 
                            0.054530000000000002, 
                            0.0568327, 
                            0.057854999999999997, 
                            0.059682399999999997, 
                            0.060304000000000003, 
                            0.066367800000000005, 
                            0.066676600000000003, 
                            0.069624599999999995, 
                            0.069830900000000001, 
                            0.070015099999999997, 
                            0.071985199999999999, 
                            0.074806800000000007, 
                            0.076375899999999997, 
                            0.081820100000000007, 
                            0.082458600000000007, 
                            0.086099300000000004, 
                            0.086379200000000003, 
                            0.086791400000000005, 
                            0.092953499999999994, 
                            0.093727199999999997, 
                            0.094015600000000005, 
                            0.094769300000000001, 
                            0.096329300000000007, 
                            0.097878199999999999, 
                            0.102446, 
                            0.108153, 
                            0.109654, 
                            0.110371, 
                            0.110389, 
                            0.11349099999999999, 
                            0.119626, 
                            0.121891, 
                            0.122365, 
                            0.128492, 
                            0.13112199999999999, 
                            0.13205600000000001, 
                            0.13259699999999999, 
                            0.138267, 
                            0.14266200000000001, 
                            0.14405799999999999, 
                            0.14610600000000001, 
                            0.14748600000000001, 
                            0.150113, 
                            0.151198, 
                            0.15138399999999999, 
                            0.156246, 
                            0.16079199999999999, 
                            0.163163, 
                            0.166273, 
                            0.17130999999999999, 
                            0.171483, 
                            0.17629600000000001, 
                            0.17630399999999999, 
                            0.176484, 
                            0.18277199999999999, 
                            0.18693399999999999, 
                            0.18893599999999999, 
                            0.19431799999999999, 
                            0.19449, 
                            0.20300000000000001, 
                            0.20324, 
                            0.207958, 
                            0.20944199999999999, 
                            0.21082300000000001, 
                            0.218726, 
                            0.220584, 
                            0.22840199999999999, 
                            0.23175699999999999, 
                            0.235815, 
                            0.23978099999999999, 
                            0.241206, 
                            0.25100899999999998, 
                            0.25853199999999998, 
                            0.26310600000000001, 
                            0.27182000000000001, 
                            0.27484799999999998, 
                            0.279082, 
                            0.28361900000000001, 
                            0.28959400000000002, 
                            0.30519800000000002, 
                            0.308388, 
                            0.30854399999999998, 
                            0.309284, 
                            0.31631199999999998, 
                            0.33391300000000002, 
                            0.342721, 
                            0.34386499999999998, 
                            0.351128, 
                            0.36517699999999997])
        
        # Constants for calculation of torque coef. polynomial KqM = [Cq s t u v]
        self.KqM = np.array([
                        [0.00379368, 0, 0, 0, 0],
                        [0.00886523, 2, 0, 0, 0],
                        [-0.032241, 1, 1, 0, 0],
                        [0.00344778, 0, 2, 0, 0],
                        [-0.0408811, 0, 1, 1, 0],
                        [-0.108009, 1, 1, 1, 0],
                        [-0.0885381, 2, 1, 1, 0],
                        [0.188561, 0, 2, 1, 0],
                        [-0.00370871, 1, 0, 0, 1],
                        [0.00513696, 0, 1, 0, 1],
                        [0.0209449, 1, 1, 0, 1],
                        [0.00474319, 2, 1, 0, 1],
                        [-0.00723408, 2, 0, 1, 1],
                        [0.00438388, 1, 1, 1, 1],
                        [-0.0269403, 0, 2, 1, 1],
                        [0.0558082, 3, 0, 1, 0],
                        [0.0161886, 0, 3, 1, 0],
                        [0.00318086, 1, 3, 1, 0],
                        [0.015896, 0, 0, 2, 0],
                        [0.0471729, 1, 0, 2, 0],
                        [0.0196283, 3, 0, 2, 0],
                        [-0.0502782, 0, 1, 2, 0],
                        [-0.030055, 3, 1, 2, 0],
                        [0.0417122, 2, 2, 2, 0],
                        [-0.0397722, 0, 3, 2, 0],
                        [-0.00350024, 0, 6, 2, 0],
                        [-0.0106854, 3, 0, 0, 1],
                        [0.00110903, 3, 3, 0, 1],
                        [-0.000313912, 0, 6, 0, 1],
                        [0.0035985, 3, 0, 1, 1],
                        [-0.00142121, 0, 6, 1, 1],
                        [-0.00383637, 1, 0, 2, 1],
                        [0.0126803, 0, 2, 2, 1],
                        [-0.00318278, 2, 3, 2, 1],
                        [0.00334268, 0, 6, 2, 1],
                        [-0.00183491, 1, 1, 0, 2],
                        [0.000112451, 3, 2, 0, 2],
                        [-0.0000297228, 3, 6, 0, 2],
                        [0.000269551, 1, 0, 1, 2],
                        [0.00083265, 2, 0, 1, 2],
                        [0.00155334, 0, 2, 1, 2],
                        [0.000302683, 0, 6, 1, 2],
                        [-0.0001843, 0, 0, 2, 2],
                        [-0.000425399, 0, 3, 2, 2],
                        [0.0000869243, 3, 3, 2, 2],
                        [-0.0004659, 0, 6, 2, 2],
                        [0.0000554194, 1, 6, 2, 2]
                    ])
        
    def objective_function(self, J, PdD, AEdAO, Z, T, rho, Va, D, is_correction):
        self.Kt = 0
        
        if is_correction:
            deltaKt = 0.000353485 \
                        - 0.00333758 * AEdAO * J**2 \
                        - 0.00478125 * AEdAO * PdD * J \
                        + 0.000257792 * (np.log10(self.Rn) - 0.301)**2 * AEdAO * J**2 \
                        + 0.0000643192 * (np.log10(self.Rn) - 0.301) * PdD**6 * J**2 \
                        - 0.0000110636 * (np.log10(self.Rn) - 0.301)**2 * PdD**6 * J**2 \
                        - 0.0000276305 * (np.log10(self.Rn) - 0.301)**2 * Z * AEdAO * J**2 \
                        + 0.0000954 * (np.log10(self.Rn) - 0.301) * Z * AEdAO * PdD * J \
                        + 0.0000032049 * (np.log10(self.Rn) - 0.301) * Z**2 * AEdAO * PdD**3 * J

            deltaKq = -0.000591412 \
                        + 0.00696898 * PdD \
                        - 0.0000666654 * Z * PdD**6 \
                        + 0.0160818 * AEdAO**2 \
                        - 0.000938091 * (np.log10(self.Rn) - 0.301) * PdD \
                        - 0.00059593 * (np.log10(self.Rn) - 0.301) * PdD**2 \
                        + 0.0000782099 * (np.log10(self.Rn) - 0.301)**2 * PdD**2 \
                        + 0.0000052199 * (np.log10(self.Rn) - 0.301) * Z * AEdAO * J**2 \
                        - 0.00000088528 * (np.log10(self.Rn) - 0.301)**2 * Z * AEdAO * PdD * J \
                        + 0.0000230171 * (np.log10(self.Rn) - 0.301) * Z * PdD**6 \
                        - 0.00000184341 * (np.log10(self.Rn) - 0.301)**2 * Z * PdD**6 \
                        - 0.00400252 * (np.log10(self.Rn) - 0.301) * AEdAO**2 \
                        + 0.000220915 * (np.log10(self.Rn) - 0.301)**2 * AEdAO**2
            
            self.Kt = deltaKt
            self.Kq = deltaKq
            
        for i in range(39):
            self.Kt += self.KtM[i, 0] * J ** self.KtM[i, 1] * PdD ** self.KtM[i, 2] * AEdAO ** self.KtM[i, 3] * Z ** self.KtM[i, 4]
        self.Kts = J ** 2 * T / (rho * Va ** 2 * D ** 2)
        return self.Kt - self.Kts

    def calculate_propeller_performance(self, R, Vs, t, w, etaR, zP, Z, D, PdD, AEdAO, hk, Ta):
        # Water input data
        rho = 999  # [kg/m^3] water density
        nu = 1.1390e-6  # [m^2/s] kinematic viscosity
        g = 9.80665  # [m/s^2] gravity acceleration
        patm = 101325  # [Pa] atmospheric pressure
        pv = 1704  # [Pa] vapour pressure of seawater (15 °C)

        # Unit conversion
        R = R * 1000 / zP  # [N]
        Vs = Vs * 1852 / 3600  # [m/s]

        # Preliminary calculations
        T = R / (1 - t)  # [N] thrust
        Va = Vs * (1 - w)  # [m/s] velocity of advance
        C075R = 2.073 * AEdAO * D / Z  # Propeller chord length at 0.75 of radius [m]

        # Finding J in order to have Kt (thrust coef.) = Kts (ship thrust coef.)

        initial_guess_J = 0.5
            
        # Finding the root using scipy.optimize.root_scalar
        result = root_scalar(self.objective_function, args=(PdD, AEdAO, Z, T, rho, Va, D, False), bracket=[0, 1], x0=initial_guess_J)

        # Extracting the optimized J value
        J = result.root

        # Propeller speed calculation
        n = Va / (J * D)

        # Reynolds number
        self.Rn = np.sqrt(Va ** 2 + (0.75 * np.pi * D * n) ** 2) * C075R / nu  # Reynolds number

        # Correction of Kt and Kq for Rn > 2e06
        if self.Rn > 2e6:
            eRn = 1

            while eRn > 0.0001:               
                
                # Finding J in order to have Kt (thrust coef.) = Kts (ship thrust coef.)

                initial_guess_J = 0.5
                
                # Finding the root using scipy.optimize.root_scalar
                result = root_scalar(self.objective_function, args=(PdD, AEdAO, Z, T, rho, Va, D, True), bracket=[0, 1], x0=initial_guess_J)

                # Extracting the optimized J value
                J = result.root
                
                # Propeller speed calculation
                n = Va / (J * D)
                
                # # New reynolds number
                RnN = np.sqrt(Va ** 2 + (0.75 * np.pi * D * n) ** 2) * C075R / nu
                eRn = abs(self.Rn - RnN) / self.Rn
                self.Rn = RnN

        # Calculation of torque coefficient Kq
        for i in range(47):
            self.Kq += self.KqM[i, 0] * J ** self.KqM[i, 1] * PdD ** self.KqM[i, 2] * AEdAO ** self.KqM[i, 3] * Z ** self.KqM[i, 4]

        # Propeller torque
        Q = self.Kq * rho * n ** 2 * D ** 5  # [N*m]

        # Open water efficiency
        etaO = J * self.Kt / (2 * np.pi * self.Kq)

        # Open water power
        PO = 2 * np.pi * Q * n / 1000  # [kW]

        # Propeller angular speed
        n = n * 60  # [rpm]

        # Strength constraint
        Dft = D * 3.280839895013123  # [ft] diameter
        PpHPDZ = PO / etaR * 1.341022 / Z  # [hp/blade] propeller power per blade
        Sc_psi = 19557  # [psi] maximum allowable stress

        tmin075dD = (0.0028 + 0.21 * ((2375 - 1125 * PdD) * PpHPDZ / (4.123 * n * Dft**3 * (Sc_psi + Dft**2 * n**2 / 12788)))**(1/3))
        t075dD = 0.0185 - 0.00125 * Z

        # Cavitation Constraint
        h = Ta - hk  # [m] distance from the center of the propeller to the water surface
        p0 = patm + rho * g * h  # [Pa] static pressure at the center of the propeller

        sig07R = (p0 - pv) / (0.5 * rho * (Va ** 2 + (np.pi * 0.7 * n / 60 * D) ** 2))  # [] mean cavitation number at 0.7R

        AO = np.pi * D ** 2 / 4  # [m] disc area

        AE = AO * AEdAO  # [m] expanded area

        Ap = (1.067 - 0.229 * PdD) * AE  # [m] projected area for the propeller

        tal07R = T / (0.5 * rho * Ap * (Va ** 2 + (np.pi * 0.7 * n / 60 * D) ** 2))  # [] thrust loading coefficient

        cavLim = interp1d(self.sigma, self.tal5, kind='linear', fill_value='extrapolate')(sig07R)
        cavLim = float(cavLim)

        # Peripherical velocity constraint
        Vtip = np.pi * D * n / 60
        Vtipmax = 39

        return n, PO, etaO, t075dD, tmin075dD, tal07R, cavLim, Vtip, Vtipmax